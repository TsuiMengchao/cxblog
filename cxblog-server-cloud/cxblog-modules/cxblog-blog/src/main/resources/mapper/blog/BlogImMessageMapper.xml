<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="me.mcx.blog.mapper.BlogImMessageMapper">
    
    <resultMap type="BlogImMessage" id="BlogImMessageResult">
        <result property="id"    column="id"    />
        <result property="toUserId"    column="to_user_id"    />
        <result property="fromUserId"    column="from_user_id"    />
        <result property="toUserAvatar"    column="to_user_avatar"    />
        <result property="content"    column="content"    />
        <result property="ipSource"    column="ip_source"    />
        <result property="ip"    column="ip"    />
        <result property="isWithdraw"    column="is_withdraw"    />
        <result property="isRead"    column="is_read"    />
        <result property="type"    column="type"    />
        <result property="code"    column="code"    />
        <result property="articleId"    column="article_id"    />
        <result property="noticeType"    column="notice_type"    />
        <result property="commentMark"    column="comment_mark"    />
        <result property="atUserId"    column="at_user_id"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
    </resultMap>

    <sql id="selectBlogImMessageVo">
        select id, to_user_id, from_user_id, to_user_avatar, content, ip_source, ip, is_withdraw, is_read, type, code, article_id, notice_type, comment_mark, at_user_id, create_by, create_time, update_by, update_time, remark from blog_im_message
    </sql>

    <select id="selectBlogImMessageList" parameterType="BlogImMessage" resultMap="BlogImMessageResult">
        <include refid="selectBlogImMessageVo"/>
        <where>  
            <if test="toUserId != null  and toUserId != ''"> and to_user_id = #{toUserId}</if>
            <if test="fromUserId != null  and fromUserId != ''"> and from_user_id = #{fromUserId}</if>
            <if test="toUserAvatar != null  and toUserAvatar != ''"> and to_user_avatar = #{toUserAvatar}</if>
            <if test="content != null  and content != ''"> and content = #{content}</if>
            <if test="ipSource != null  and ipSource != ''"> and ip_source = #{ipSource}</if>
            <if test="ip != null  and ip != ''"> and ip = #{ip}</if>
            <if test="isWithdraw != null "> and is_withdraw = #{isWithdraw}</if>
            <if test="isRead != null "> and is_read = #{isRead}</if>
            <if test="type != null "> and type = #{type}</if>
            <if test="code != null "> and code = #{code}</if>
            <if test="articleId != null "> and article_id = #{articleId}</if>
            <if test="noticeType != null "> and notice_type = #{noticeType}</if>
            <if test="commentMark != null "> and comment_mark = #{commentMark}</if>
            <if test="atUserId != null  and atUserId != ''"> and at_user_id = #{atUserId}</if>
        </where>
    </select>
    
    <select id="selectBlogImMessageById" parameterType="String" resultMap="BlogImMessageResult">
        <include refid="selectBlogImMessageVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertBlogImMessage" parameterType="BlogImMessage">
        insert into blog_im_message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="toUserId != null">to_user_id,</if>
            <if test="fromUserId != null">from_user_id,</if>
            <if test="toUserAvatar != null">to_user_avatar,</if>
            <if test="content != null">content,</if>
            <if test="ipSource != null">ip_source,</if>
            <if test="ip != null">ip,</if>
            <if test="isWithdraw != null">is_withdraw,</if>
            <if test="isRead != null">is_read,</if>
            <if test="type != null">type,</if>
            <if test="code != null">code,</if>
            <if test="articleId != null">article_id,</if>
            <if test="noticeType != null">notice_type,</if>
            <if test="commentMark != null">comment_mark,</if>
            <if test="atUserId != null">at_user_id,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="remark != null">remark,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="toUserId != null">#{toUserId},</if>
            <if test="fromUserId != null">#{fromUserId},</if>
            <if test="toUserAvatar != null">#{toUserAvatar},</if>
            <if test="content != null">#{content},</if>
            <if test="ipSource != null">#{ipSource},</if>
            <if test="ip != null">#{ip},</if>
            <if test="isWithdraw != null">#{isWithdraw},</if>
            <if test="isRead != null">#{isRead},</if>
            <if test="type != null">#{type},</if>
            <if test="code != null">#{code},</if>
            <if test="articleId != null">#{articleId},</if>
            <if test="noticeType != null">#{noticeType},</if>
            <if test="commentMark != null">#{commentMark},</if>
            <if test="atUserId != null">#{atUserId},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="remark != null">#{remark},</if>
         </trim>
    </insert>

    <update id="updateBlogImMessage" parameterType="BlogImMessage">
        update blog_im_message
        <trim prefix="SET" suffixOverrides=",">
            <if test="toUserId != null">to_user_id = #{toUserId},</if>
            <if test="fromUserId != null">from_user_id = #{fromUserId},</if>
            <if test="toUserAvatar != null">to_user_avatar = #{toUserAvatar},</if>
            <if test="content != null">content = #{content},</if>
            <if test="ipSource != null">ip_source = #{ipSource},</if>
            <if test="ip != null">ip = #{ip},</if>
            <if test="isWithdraw != null">is_withdraw = #{isWithdraw},</if>
            <if test="isRead != null">is_read = #{isRead},</if>
            <if test="type != null">type = #{type},</if>
            <if test="code != null">code = #{code},</if>
            <if test="articleId != null">article_id = #{articleId},</if>
            <if test="noticeType != null">notice_type = #{noticeType},</if>
            <if test="commentMark != null">comment_mark = #{commentMark},</if>
            <if test="atUserId != null">at_user_id = #{atUserId},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteBlogImMessageById" parameterType="String">
        delete from blog_im_message where id = #{id}
    </delete>

    <delete id="deleteBlogImMessageByIds" parameterType="String">
        delete from blog_im_message where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="selectBlogImMessageCount" parameterType="BlogImMessage" resultType="Integer">
        SELECT COUNT(*) AS count FROM blog_im_message
        <where>
            <if test="toUserId != null  and toUserId != ''"> and to_user_id = #{toUserId}</if>
            <if test="fromUserId != null  and fromUserId != ''"> and from_user_id = #{fromUserId}</if>
            <if test="toUserAvatar != null  and toUserAvatar != ''"> and to_user_avatar = #{toUserAvatar}</if>
            <if test="content != null  and content != ''"> and content = #{content}</if>
            <if test="ipSource != null  and ipSource != ''"> and ip_source = #{ipSource}</if>
            <if test="ip != null  and ip != ''"> and ip = #{ip}</if>
            <if test="isWithdraw != null "> and is_withdraw = #{isWithdraw}</if>
            <if test="isRead != null "> and is_read = #{isRead}</if>
            <if test="type != null "> and type = #{type}</if>
            <if test="code != null "> and code = #{code}</if>
            <if test="articleId != null "> and article_id = #{articleId}</if>
            <if test="noticeType != null "> and notice_type = #{noticeType}</if>
            <if test="commentMark != null "> and comment_mark = #{commentMark}</if>
            <if test="atUserId != null  and atUserId != ''"> and at_user_id = #{atUserId}</if>
        </where>
    </select>

<!--    ================================================-->
    <update id="updateRead">
        update blog_im_message set is_read = 1 where from_user_id = #{fromUserId} and to_user_id=#{toUserId} and is_read = 0
    </update>

    <resultMap type="me.mcx.blog.domain.vo.message.ImMessageVO" id="PublicHistoryList">
        <result property="id"    column="id"    />
        <result property="toUserId"    column="to_user_id"    />
        <result property="fromUserId"    column="from_user_id"    />
        <result property="content"    column="content"    />
        <result property="ipSource"    column="ip_source"    />
        <result property="ip"    column="ip"    />
        <result property="isWithdraw"    column="is_withdraw"    />
        <result property="isRead"    column="is_read"    />
        <result property="type"    column="type"    />
        <result property="code"    column="code"    />
        <result property="articleId"    column="article_id"    />
        <result property="noticeType"    column="notice_type"    />
        <result property="commentMark"    column="comment_mark"    />
        <result property="atUserId"    column="at_user_id"    />
        <result property="createTime"    column="create_time"    />
    </resultMap>
    <select id="selectPublicHistoryList" resultMap="PublicHistoryList">
        SELECT *
        FROM blog_im_message im
        where im.to_user_id is null
        order by im.create_time desc
    </select>
    <select id="selectPublicUserImHistoryList" resultType="me.mcx.blog.domain.vo.message.ImMessageVO">
        SELECT im.*
        FROM blog_im_message im
        where (im.to_user_id = #{fromUserId} OR im.from_user_id = #{fromUserId})
          and (im.to_user_id = #{toUserId} OR im.from_user_id = #{toUserId})
        order by im.create_time desc
    </select>
    <select id="selectListReadByUserId" resultType="java.lang.Integer">
        select count(id) from blog_im_message where to_user_id=#{fromUserId} and from_user_id=#{toUserId} and is_read = 0
    </select>

    <select id="getMessageNotice" resultType="me.mcx.blog.domain.vo.message.ImMessageVO">
        SELECT a.id as articleId,a.title as articleTitle, im.*
        FROM blog_im_message im
        left join blog_article a on a.id = im.article_id
        where im.to_user_id = #{userId}

        <choose>
            <when test="noticeType != null">
                and notice_type=#{noticeType}
            </when>

            <otherwise>
                and notice_type = 5
            </otherwise>
        </choose>
        order by im.create_time desc
    </select>
</mapper>